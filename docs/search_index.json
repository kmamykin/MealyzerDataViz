[
["index.html", "Exploration of data collected with self monitoring in diabetes Chapter 1 Introduction", " Exploration of data collected with self monitoring in diabetes Kliment Mamykin, Sunny Lee, Jinrong Cao 2019-12-10 Chapter 1 Introduction The data in this dataset was collected with several mobile applications built for monitoring and self management of type 2 diabetes. ?? as part of what study?. All apps included almost the same set of features for data collection but all provided different types of feedback to users. Glucoracle app asked individuals to photograph the meal, provide text description and ingredients, estimate nutritional breakdown of the meal, and capture the blood glucose (BG) before and after the meal. The users received predictions for postmeal BG levels. Platano app v1 allowed users to simply record the meals and the BG levels pre and post meals. Platano app v2 allowed users to record the meals+BGs and for each meal asked if the meal met their nutritional goals. Platano users also were provided with Fitbit tracking device for tracking physical activity and sleep. All meals collected by he app were evaluated by a nutritional expert to estimate the number of calories and the nutritional breakdown (grams of protein, fat, carbs, fiber) in the meals. Only Glucoracle app also asked users to estimate the calories and nutritional breakdown of the meals to the best of their abilities. While all the apps had some different features, the dataset collected exhibits a lot of common sets of fields. The goal for this project is to perform exploratory data visualization of this dataset. "],
["data-sources.html", "Chapter 2 Data sources 2.1 Mealyzer application and functionality 2.2 Dataset description 2.3 Dataset collection artifacts 2.4 Data Import", " Chapter 2 Data sources 2.1 Mealyzer application and functionality 2.2 Dataset description bg readings meals meal details, evaluator nutrients, user nutriends, calculated fields (calculated calories, nutrient proportions) activities sleep meal photos 2.3 Dataset collection artifacts pre and post meal bg times evaluator 2.4 Data Import raw_data_path = &quot;~/Dropbox/MealyzerData&quot; users.raw = read_csv(file.path(raw_data_path, &quot;mealyzer_data_overview.csv&quot;), col_types = cols()) glimpse(users.raw) Observations: 66 Variables: 7 $ user_id &lt;dbl&gt; 24, 56, 57, 58, 88, 99, 124, 377, 445,… $ app &lt;chr&gt; &quot;GlucOracle&quot;, &quot;GlucOracle&quot;, &quot;GlucOracl… $ total_meals &lt;dbl&gt; 93, 60, 48, 36, 38, 2, 8, 13, 7, 48, 8… $ total_bg_readings &lt;dbl&gt; 193, 120, 96, 71, 80, 3, 15, 23, 14, 5… $ meals_with_nutrition_eval &lt;dbl&gt; 93, 60, 48, 36, 38, 2, 8, 12, 7, 1, 34… $ meals_with_pre_post_bg &lt;dbl&gt; 87, 58, 40, 34, 35, 1, 7, 10, 7, 6, 46… $ complete_meals &lt;dbl&gt; 87, 40, 32, 32, 35, 1, 1, 1, 1, NA, 15… read.mealyzer_files &lt;- function(data_dir, user_ids, file_name, add_user_id, col_types) { result &lt;- c() for (user_id in user_ids) { file_path = file.path(data_dir, as.character(user_id), file_name) df = read_csv(file_path, col_types = col_types) if (add_user_id) { df = cbind(user_id = user_id, df) } if (length(result) == 0) { result &lt;- df } else { result &lt;- rbind(result, df) } } return(result) } bg_readings.raw = read.mealyzer_files(raw_data_path, users.raw[[&quot;user_id&quot;]], &quot;bg_labeled.csv&quot;, add_user_id = TRUE, col_types = cols( time = col_double(), bg = col_double(), meals_kind = col_character(), meal_id = col_double(), readings_kind = col_character() )) glimpse(bg_readings.raw) Observations: 7,057 Variables: 6 $ user_id &lt;dbl&gt; 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24… $ time &lt;dbl&gt; 2710.000, 2805.000, 3255.000, 3320.000, 3325.000, … $ bg &lt;dbl&gt; 81, 94, 84, 89, 89, 85, 86, 97, 82, 92, 84, 99, 99… $ meals_kind &lt;chr&gt; &quot;dinner&quot;, &quot;dinner&quot;, &quot;morning_snack&quot;, &quot;morning_snac… $ meal_id &lt;dbl&gt; 811, 811, 812, 812, 813, 813, 814, 814, 819, 819, … $ readings_kind &lt;chr&gt; &quot;premeal&quot;, &quot;postmeal&quot;, &quot;premeal&quot;, &quot;postmeal&quot;, &quot;pre… meals.raw = read.mealyzer_files(raw_data_path, users.raw[[&quot;user_id&quot;]], &quot;mealyzer_data.csv&quot;, add_user_id = FALSE, col_types = cols()) glimpse(meals.raw) Observations: 4,361 Variables: 31 $ user_id &lt;dbl&gt; 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, … $ meal_id &lt;dbl&gt; 811, 812, 813, 814, 819, 821, 822, 825, … $ eaten_at &lt;dbl&gt; 2771.446, 3260.292, 3335.071, 3709.311, … $ title &lt;chr&gt; &quot;Taco fried shrimp And spinach salad&quot;, … $ ingredients &lt;chr&gt; &quot;Fried shrimp corn meal crusted, tortia,… $ kind &lt;chr&gt; &quot;dinner&quot;, &quot;morning_snack&quot;, &quot;breakfast&quot;, … $ photo_file_name &lt;chr&gt; &quot;cdv_photo_001.jpg&quot;, &quot;cdv_photo_002.jpg&quot;… $ carbs_eval &lt;dbl&gt; 57, 7, 29, 29, 22, 6, 24, 1, 48, 63, 22,… $ protein_eval &lt;dbl&gt; 22, 4, 30, 4, 45, 4, 34, 22, 25, 36, 18,… $ fat_eval &lt;dbl&gt; 35, 1, 28, 8, 14, 1, 29, 28, 16, 33, 13,… $ calories_eval &lt;dbl&gt; 637, 53, 374, 191, 423, 51, 475, 335, 43… $ fiber_eval &lt;dbl&gt; 5, 0, 12, 5, 2, 0, 10, 1, 2, 17, 3, 2, 0… $ evaluator_id &lt;dbl&gt; 6865, 6865, 6865, 6865, 59, 59, 59, 59, … $ platemate_id &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, … $ carbs_user &lt;dbl&gt; 47, 4, 36, 22, 30, 4, 38, 10, 31, 41, 12… $ protein_user &lt;dbl&gt; 14, 0, 18, 8, 30, 1, 18, 26, 28, 18, 9, … $ fat_user &lt;dbl&gt; 35, 1, 36, 3, 10, 1, 36, 15, 16, 40, 9, … $ calories_user &lt;dbl&gt; 570, 80, 400, 300, 520, 80, 400, 600, 60… $ fiber_user &lt;dbl&gt; 12, 0, 8, 3, 5, 0, 8, 20, 14, 8, 3, 11, … $ premeal_bg &lt;dbl&gt; 81, 84, 89, 86, 82, 84, 99, 89, 115, 95,… $ premeal_bg_time &lt;dbl&gt; 2710, 3255, 3325, 3700, 4030, 4720, 4790… $ postmeal_bg &lt;dbl&gt; 94, 89, 85, 97, 92, 99, 105, 90, 98, 99,… $ postmeal_bg_time &lt;dbl&gt; 2805.000, 3320.000, 3425.000, 3755.000, … $ eval_calories_computed &lt;dbl&gt; 631, 53, 488, 204, 394, 49, 493, 344, 43… $ eval_proportion_carbs &lt;dbl&gt; 0.36133122, 0.52830189, 0.23770492, 0.56… $ eval_proportion_protein &lt;dbl&gt; 0.13946117, 0.30188679, 0.24590164, 0.07… $ eval_proportion_fat &lt;dbl&gt; 0.4992076, 0.1698113, 0.5163934, 0.35294… $ user_calories_computed &lt;dbl&gt; 559, 25, 540, 147, 330, 29, 548, 279, 38… $ user_proportion_carbs &lt;dbl&gt; 0.33631485, 0.64000000, 0.26666667, 0.59… $ user_proportion_protein &lt;dbl&gt; 0.1001789, 0.0000000, 0.1333333, 0.21768… $ user_proportion_fat &lt;dbl&gt; 0.5635063, 0.3600000, 0.6000000, 0.18367… "],
["data-transformation.html", "Chapter 3 Data transformation 3.1 Enhancing user records with data availability indicators 3.2 Anonymized timestamps 3.3 Other field types conversions", " Chapter 3 Data transformation 3.1 Enhancing user records with data availability indicators Datasets collected per user vary, due to different app version used throughout the study. Not all users have images of the meals recorded, and not all users opted-in to sharing Fitbit data (the source of activities and sleep data). Here we enhance the users records by checking on the availability of those datasets. user_directory_exists &lt;- function (ids, dirname) { sapply(ids, function(id) dir.exists(file.path(raw_data_path, id, dirname))) } user_file_exists &lt;- function(ids, filename) { sapply(ids, function(id) file.exists(file.path(raw_data_path, id, filename))) } users.all = users.raw %&gt;% mutate( user_id = as.character(user_id), user_number = as.integer(user_id), user_fct = fct_reorder(user_id, user_number), app = as.factor(app), has_meal_images = user_directory_exists(user_id, &quot;images&quot;), has_sleep = user_file_exists(user_id, &quot;sleep.csv&quot;), has_activities_calories = user_file_exists(user_id, &quot;activities-calories.csv&quot;), has_activities_distance = user_file_exists(user_id, &quot;activities-distance.csv&quot;), has_activities_steps = user_file_exists(user_id, &quot;activities-steps.csv&quot;) ) glimpse(users.all) Observations: 66 Variables: 14 $ user_id &lt;chr&gt; &quot;24&quot;, &quot;56&quot;, &quot;57&quot;, &quot;58&quot;, &quot;88&quot;, &quot;99&quot;, &quot;1… $ app &lt;fct&gt; GlucOracle, GlucOracle, GlucOracle, Gl… $ total_meals &lt;dbl&gt; 93, 60, 48, 36, 38, 2, 8, 13, 7, 48, 8… $ total_bg_readings &lt;dbl&gt; 193, 120, 96, 71, 80, 3, 15, 23, 14, 5… $ meals_with_nutrition_eval &lt;dbl&gt; 93, 60, 48, 36, 38, 2, 8, 12, 7, 1, 34… $ meals_with_pre_post_bg &lt;dbl&gt; 87, 58, 40, 34, 35, 1, 7, 10, 7, 6, 46… $ complete_meals &lt;dbl&gt; 87, 40, 32, 32, 35, 1, 1, 1, 1, NA, 15… $ user_number &lt;int&gt; 24, 56, 57, 58, 88, 99, 124, 377, 445,… $ user_fct &lt;fct&gt; 24, 56, 57, 58, 88, 99, 124, 377, 445,… $ has_meal_images &lt;lgl&gt; TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TR… $ has_sleep &lt;lgl&gt; FALSE, FALSE, FALSE, FALSE, FALSE, FAL… $ has_activities_calories &lt;lgl&gt; FALSE, FALSE, FALSE, FALSE, FALSE, FAL… $ has_activities_distance &lt;lgl&gt; FALSE, FALSE, FALSE, FALSE, FALSE, FAL… $ has_activities_steps &lt;lgl&gt; FALSE, FALSE, FALSE, FALSE, FALSE, FAL… 3.2 Anonymized timestamps All data coming out of this study was anonymized. As a part of anonymization the actual timestamps were replaced with a number of seconds since user’s anchor timestamp, which is defined as the time when they took the first recording with the app. Part of the data transformation was to convert all timestamps from a ‘number of seconds’ format to the actual timestams (POSIXct) format, assuming the same anchor date for all users (2019-01-01 00:00:00 EST). The by-product of this transformation was the alignment of all timeseries data to the same starting point, simplifying comparison across users. 3.3 Other field types conversions Several fields were converted to different types to simplify further calculations and visualizations: user_id converted from numeric to character type eaten_at converted to normalized timestamp kind converted to a factor premeal_bg_time converted to normalized timestamp postmeal_bg_timeconverted to normalized timestamp as.timestamp &lt;- function(minutes_since, anchor_date = &#39;2019-01-01 00:00:00 EST&#39;) { anchor_time = as.POSIXct(anchor_date) return(anchor_time + minutes_since * 60) } as.meals_kind &lt;- function(values) { return(fct_relevel(values, c(&quot;breakfast&quot;, &quot;morning_snack&quot;, &quot;lunch&quot;, &quot;afternoon_snack&quot;, &quot;dinner&quot;, &quot;after_dinner_snack&quot;))) } print_df &lt;- function(df, ...) { arguments &lt;- list(...) if (length(arguments) &gt; 0) { print(df %&gt;% select(...)) } else { print(df) } return(df) } bg_readings.all = bg_readings.raw %&gt;% mutate( user_id = as.character(user_id), user_number = as.integer(user_id), user_fct = fct_reorder(user_id, user_number), time = as.timestamp(time), meals_kind = as.meals_kind(meals_kind), readings_kind = fct_relevel(readings_kind, c(&quot;premeal&quot;, &quot;postmeal&quot;)) ) glimpse(bg_readings.all) Observations: 7,057 Variables: 8 $ user_id &lt;chr&gt; &quot;24&quot;, &quot;24&quot;, &quot;24&quot;, &quot;24&quot;, &quot;24&quot;, &quot;24&quot;, &quot;24&quot;, &quot;24&quot;, &quot;2… $ time &lt;dttm&gt; 2019-01-02 21:10:00, 2019-01-02 22:45:00, 2019-01… $ bg &lt;dbl&gt; 81, 94, 84, 89, 89, 85, 86, 97, 82, 92, 84, 99, 99… $ meals_kind &lt;fct&gt; dinner, dinner, morning_snack, morning_snack, brea… $ meal_id &lt;dbl&gt; 811, 811, 812, 812, 813, 813, 814, 814, 819, 819, … $ readings_kind &lt;fct&gt; premeal, postmeal, premeal, postmeal, premeal, pos… $ user_number &lt;int&gt; 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24… $ user_fct &lt;fct&gt; 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24… meals.all = meals.raw %&gt;% mutate( user_id = as.character(user_id), user_number = as.integer(user_id), user_fct = fct_reorder(user_id, user_number), eaten_at = as.timestamp(eaten_at), kind = as.meals_kind(kind), premeal_bg_time = as.timestamp(premeal_bg_time), postmeal_bg_time = as.timestamp(postmeal_bg_time) ) glimpse(meals.all) Observations: 4,361 Variables: 33 $ user_id &lt;chr&gt; &quot;24&quot;, &quot;24&quot;, &quot;24&quot;, &quot;24&quot;, &quot;24&quot;, &quot;24&quot;, &quot;24&quot;… $ meal_id &lt;dbl&gt; 811, 812, 813, 814, 819, 821, 822, 825, … $ eaten_at &lt;dttm&gt; 2019-01-02 22:11:26, 2019-01-03 06:20:1… $ title &lt;chr&gt; &quot;Taco fried shrimp And spinach salad&quot;, … $ ingredients &lt;chr&gt; &quot;Fried shrimp corn meal crusted, tortia,… $ kind &lt;fct&gt; dinner, morning_snack, breakfast, lunch,… $ photo_file_name &lt;chr&gt; &quot;cdv_photo_001.jpg&quot;, &quot;cdv_photo_002.jpg&quot;… $ carbs_eval &lt;dbl&gt; 57, 7, 29, 29, 22, 6, 24, 1, 48, 63, 22,… $ protein_eval &lt;dbl&gt; 22, 4, 30, 4, 45, 4, 34, 22, 25, 36, 18,… $ fat_eval &lt;dbl&gt; 35, 1, 28, 8, 14, 1, 29, 28, 16, 33, 13,… $ calories_eval &lt;dbl&gt; 637, 53, 374, 191, 423, 51, 475, 335, 43… $ fiber_eval &lt;dbl&gt; 5, 0, 12, 5, 2, 0, 10, 1, 2, 17, 3, 2, 0… $ evaluator_id &lt;dbl&gt; 6865, 6865, 6865, 6865, 59, 59, 59, 59, … $ platemate_id &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, … $ carbs_user &lt;dbl&gt; 47, 4, 36, 22, 30, 4, 38, 10, 31, 41, 12… $ protein_user &lt;dbl&gt; 14, 0, 18, 8, 30, 1, 18, 26, 28, 18, 9, … $ fat_user &lt;dbl&gt; 35, 1, 36, 3, 10, 1, 36, 15, 16, 40, 9, … $ calories_user &lt;dbl&gt; 570, 80, 400, 300, 520, 80, 400, 600, 60… $ fiber_user &lt;dbl&gt; 12, 0, 8, 3, 5, 0, 8, 20, 14, 8, 3, 11, … $ premeal_bg &lt;dbl&gt; 81, 84, 89, 86, 82, 84, 99, 89, 115, 95,… $ premeal_bg_time &lt;dttm&gt; 2019-01-02 21:10:00, 2019-01-03 06:15:0… $ postmeal_bg &lt;dbl&gt; 94, 89, 85, 97, 92, 99, 105, 90, 98, 99,… $ postmeal_bg_time &lt;dttm&gt; 2019-01-02 22:45:00, 2019-01-03 07:20:0… $ eval_calories_computed &lt;dbl&gt; 631, 53, 488, 204, 394, 49, 493, 344, 43… $ eval_proportion_carbs &lt;dbl&gt; 0.36133122, 0.52830189, 0.23770492, 0.56… $ eval_proportion_protein &lt;dbl&gt; 0.13946117, 0.30188679, 0.24590164, 0.07… $ eval_proportion_fat &lt;dbl&gt; 0.4992076, 0.1698113, 0.5163934, 0.35294… $ user_calories_computed &lt;dbl&gt; 559, 25, 540, 147, 330, 29, 548, 279, 38… $ user_proportion_carbs &lt;dbl&gt; 0.33631485, 0.64000000, 0.26666667, 0.59… $ user_proportion_protein &lt;dbl&gt; 0.1001789, 0.0000000, 0.1333333, 0.21768… $ user_proportion_fat &lt;dbl&gt; 0.5635063, 0.3600000, 0.6000000, 0.18367… $ user_number &lt;int&gt; 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, … $ user_fct &lt;fct&gt; 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, … "],
["missing-values.html", "Chapter 4 Missing values 4.1 Per user data availability 4.2 Meals data availability 4.3 Visualizing user compliance on recording postmeal BG 4.4 Imputing post-meal BG 4.5 Analyzing pre and post meal BG time intervals 4.6 Final selected meals subset for BG impact analysis", " Chapter 4 Missing values 4.1 Per user data availability Not every user appears to have every dataset available. While BG recordings and meals are recorded for all selected users, not all of them have meal images available, and not all have Fitbit data (activities and sleep) available. users.all %&gt;% # Fake false data availability flags with NAs to visualize it as missing mutate( has_sleep = ifelse(has_sleep, has_sleep, NA), has_activities_calories = ifelse(has_activities_calories, has_activities_calories, NA), has_activities_distance = ifelse(has_activities_distance, has_activities_distance, NA), has_activities_steps = ifelse(has_activities_steps, has_activities_steps, NA), ) %&gt;% visdat::vis_dat() users.all %&gt;% filter(has_sleep &amp; has_activities_steps &amp; has_activities_calories &amp; has_activities_distance &amp; !is.na(complete_meals)) %&gt;% count() # A tibble: 1 x 1 n &lt;int&gt; 1 7 We have only 7 users with all data present (including complete meals anbd fitbit data), and that is not even taking into account the number of quality meals for those users. The consequence of this sparse data availability is that for different analysis we would need to use different slices of the overall data and different sets of users. When analyzing data for a particular user, the user selection matters a lot. 4.2 Meals data availability visdat::vis_dat(meals.all) There are several patterns of missing values that can be seen from this plot. platemate_id is almost universally missing from all meals. premeal_bg and premeal_bg_time are 100% present. The application did not allow recording a meal without also recording BG reading taken shortly before the meal. postmeal_bg and postmeal_bg_time on the other hand are not recorded for all meals. This is because despite of the applications sending notifications to the users 2h after the meal reminding to record a postmeal BG, users dodn’t do it for every meal. Further we show a breakdown of “compliance” for taking postmeal BG, and a way to impute the missing values. Some relatively small percentage of meal are missing the “eval” (evaluator’s) fields on the nutritional meal breakdown (e.g. calories_eval, eval_calories_computed, eval_proportion_carbs…). The “user” nutritional breakdown values are mostly missing (fields like calories_user, user_calories_computed, user_proportion_carbs…). The reason is that some versions of the app asked users to enter nutritional estimation, but some version only asked on the goals, but not nutritional estimation. extracat::visna(meals.all) 4.3 Visualizing user compliance on recording postmeal BG meals.all %&gt;% mutate(premeal_bg_exist = ifelse(is.na(premeal_bg), 0, 1), postmeal_bg_exist = ifelse(is.na(postmeal_bg), 0, 1)) %&gt;% group_by(user_id) %&gt;% summarise(all_meals = sum(premeal_bg_exist), Present = sum(postmeal_bg_exist)) %&gt;% ungroup() %&gt;% mutate(Missing = all_meals - Present) %&gt;% arrange(desc(all_meals)) %&gt;% gather(key = &quot;type&quot;, value = &quot;Freq&quot;, -all_meals, -user_id) %&gt;% ggplot() + geom_col(aes(x = fct_reorder(user_id, all_meals), y = Freq, fill = fct_relevel(type, &quot;Present&quot;, &quot;Missing&quot;)), position = position_stack(reverse = TRUE)) + coord_flip() + labs( title = &quot;Meals with missing postmeal BG by user&quot;, x = &quot;Users&quot;, y = &quot;Counts&quot;, fill = &quot;Postmeal BG&quot; ) + theme(legend.position = &quot;right&quot;) There does not seem to be any patterns in this visualization beyond staing that some users were diligent and recorded most of the postmeals BG, some totally ignored it, and the majority of users are somewhere in between. 4.4 Imputing post-meal BG As shown before, a lot of meals are missing postmeal BG records, indicating that the users did not record another BG reading around 2h mark as instructed. However, the value of postmeal_bg and postmeal_bg_time can be imputed, considering that in some cases users ate the next meal and recorded a BG reading with it. We impute missing postmeal values with the next meal premeal values. meals.imputed = meals.all %&gt;% arrange(user_id, eaten_at) %&gt;% mutate( postmeal_bg_time = coalesce(postmeal_bg_time, lead(premeal_bg_time)), postmeal_bg = coalesce(postmeal_bg, lead(premeal_bg)) ) %&gt;% mutate( premeal_bg_delay_minutes = as.double(difftime(eaten_at, premeal_bg_time, units = &quot;mins&quot;)), postmeal_bg_delay_minutes = as.double(difftime(postmeal_bg_time, eaten_at, units = &quot;mins&quot;)), bg_impact = postmeal_bg - premeal_bg, bg_impact_slope = bg_impact / (premeal_bg_delay_minutes + postmeal_bg_delay_minutes) ) %&gt;% # keep only positive delays, this filters out boundary meals when user_id changes in the dataset and getting the next record meal will be incorrect. filter(!is.na(premeal_bg_delay_minutes) &amp; premeal_bg_delay_minutes &gt; 0 &amp; !is.na(postmeal_bg_delay_minutes) &amp; postmeal_bg_delay_minutes &gt; 0 ) After imputing postmeal_bg and postmeal_bg_time several new metrics were calculated: premeal_bg_delay_minutes calculated number of minutes before premeal BG is taken and the meal postmeal_bg_delay_minutes calculated number of minutes after the meal when postmeal BG was taken bg_impact calculated difference between postmeal_bg and premeal_bg bg_impact_slope ratio of bg_impact over the duration in minutes between post-meal and pre-meal times. Higher bg_impact_slope means faster BG increase abter the meal 4.5 Analyzing pre and post meal BG time intervals Here we look at the distribution of values for premeal BG delay (defined as the difference in minutes between users recording a BG reading and eating a meal), and postmeal BG delay (defined as the difference in minutes between users eating a meal and taking a postmeal BG reading). g1 = meals.imputed %&gt;% filter(premeal_bg_delay_minutes &gt;= 0 &amp; premeal_bg_delay_minutes &lt;= 60) %&gt;% ggplot() + geom_histogram(aes(x = premeal_bg_delay_minutes), binwidth = 1.0) + scale_x_continuous(breaks=c(0, 15, 30, 45, 60), labels = c(&quot;0&quot;, &quot;15m&quot;, &quot;30m&quot;, &quot;45m&quot;, &quot;1h&quot;), limits = c(0, 60), expand = expand_scale(mult = c(0, 0.1))) + theme( axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.y = element_blank(), axis.ticks.y = element_blank() ) g2 = meals.imputed %&gt;% filter(premeal_bg_delay_minutes &gt;= 0 &amp; premeal_bg_delay_minutes &lt;= 60) %&gt;% ggplot() + geom_boxplot(aes(y = premeal_bg_delay_minutes)) + scale_y_continuous(breaks=c(0, 15, 30, 45, 60), labels = c(&quot;0&quot;, &quot;15m&quot;, &quot;30m&quot;, &quot;45m&quot;, &quot;1h&quot;), limits = c(0, 60), expand = expand_scale(mult = c(0, 0.1))) + coord_flip() + labs( y = &quot;Premeal delay&quot; ) + theme( axis.title.y = element_blank(), axis.text.y = element_blank(), axis.ticks.y = element_blank() ) g3 = meals.imputed %&gt;% filter(postmeal_bg_delay_minutes &gt;= 0 &amp; postmeal_bg_delay_minutes &lt;= 1000) %&gt;% ggplot() + geom_histogram(aes(x = postmeal_bg_delay_minutes), binwidth = 30) + scale_x_continuous(breaks=c(0, 60, 120, 180, 240, 300), labels = c(&quot;0&quot;, &quot;1h&quot;, &quot;2h&quot;, &quot;3h&quot;, &quot;4h&quot;, &quot;5h&quot;), limits = c(0, 1000), expand = expand_scale(mult = c(0, .05))) + theme( axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.y = element_blank(), axis.ticks.y = element_blank() ) g4 = meals.imputed %&gt;% filter(postmeal_bg_delay_minutes &gt;= 0 &amp; postmeal_bg_delay_minutes &lt;= 1000) %&gt;% ggplot() + geom_boxplot(aes(y = postmeal_bg_delay_minutes), varwidth = TRUE) + scale_y_continuous(breaks=c(0, 60, 120, 180, 240, 300), labels = c(&quot;0&quot;, &quot;1h&quot;, &quot;2h&quot;, &quot;3h&quot;, &quot;4h&quot;, &quot;5h&quot;), limits = c(0, 1000), expand = expand_scale(mult = c(0, .05))) + coord_flip() + labs( y = &quot;Postmeal delay&quot; ) + theme( axis.title.y = element_blank(), axis.text.y = element_blank(), axis.ticks.y = element_blank() ) gridExtra::grid.arrange( g1, g2, g3, g4, nrow = 4, heights = c(3, 1, 3, 1), top = &quot;Pre and post meal BG delays&quot; ) Premeal BG delay distribution has two distinct modes, one at around 5 min and another at around 22 min. The application to record meals and premeal BGs asked the users to record those two pieces of information at the same time, but also allowed to change the time when the actual BG test was performed. The explanation for the first mode could be the interaction scenario when a person took a BG reading, and before the meal has started recorded it with the application (adjusting the BG test time to about 5min back). The socond mode could be another interaction scenario, where a person takes a BG reading, then eats the meal, and only after the meal is finished records the meal in the app (adjusting the BG test time to about 22 min back). One way to co nfirm it would be to visually analyze the meal images for the meals belonging to the second mode and see if those are the images of already completed meals. The researcher confirmed that in focus groups some people found the process of recording a meal to be disruptive, and may be we are seeing a hack some users adopted not to disrupt the meal experience with a lengthy process of entering a meal in the app while they are hungry. The postmeal BG delays have a median around 2h 15min, due the fact that the app was sending reminders at around 2h after the meal. The distribution has a long tail and a lot of outliers, probably causes by our postmeal BG imputation method and/or lapses in consistently using the app for all meals. For any analysis ths focuses on the question of glycemic impact of the meals such long postmeal interval in not useful. In our analysis we filtered the meal to only those that have a postmeal BG at least 4h after the meal. 4.5.1 Selecting users for the analysis Not all users used the application in the same capacity, and some recorded very few meals. For the further analysis we select only those users that recorded at least 14 meals (threshold picked such that 28 users were selected for easy facetting in a grid) users.selected = meals.imputed %&gt;% filter(premeal_bg_delay_minutes &gt; 0 &amp; premeal_bg_delay_minutes &lt;= 60) %&gt;% # Limit premeal bg delay to 1h filter(postmeal_bg_delay_minutes &gt; 0 &amp; postmeal_bg_delay_minutes &lt;= 240) %&gt;% # Limit postmeal bg delay to 4h group_by(user_id) %&gt;% summarise(Freq = n()) %&gt;% ungroup() %&gt;% arrange(desc(Freq)) %&gt;% head(24) # 24 chosed to fit in a 6x4 facet grid selected_user_ids = users.selected[[&#39;user_id&#39;]] print(selected_user_ids) [1] &quot;2254&quot; &quot;2890&quot; &quot;1821&quot; &quot;2948&quot; &quot;2392&quot; &quot;1983&quot; &quot;2942&quot; &quot;2312&quot; &quot;2475&quot; &quot;2721&quot; [11] &quot;2800&quot; &quot;24&quot; &quot;2536&quot; &quot;2262&quot; &quot;2004&quot; &quot;2702&quot; &quot;56&quot; &quot;2308&quot; &quot;1884&quot; &quot;2288&quot; [21] &quot;57&quot; &quot;1665&quot; &quot;1809&quot; &quot;58&quot; 4.6 Final selected meals subset for BG impact analysis We limit the list of all meals with imputed values to only those users with the most meals and where pre and post meal delays are withing acceptable range (1h for premeal delay and 4h for postmeal delay). meals.selected = meals.imputed %&gt;% filter(user_id %in% selected_user_ids) %&gt;% filter(premeal_bg_delay_minutes &gt; 0 &amp; premeal_bg_delay_minutes &lt;= 60) %&gt;% # Limit premeal bg delay to 1h filter(postmeal_bg_delay_minutes &gt; 0 &amp; postmeal_bg_delay_minutes &lt;= 240) # Limit postmeal bg delay to 4h "],
["results.html", "Chapter 5 Results 5.1 Looking at the time of the meals 5.2 Meal kind analysis 5.3 Meal nutrients analysis 5.4 Meal BG impact visualization 5.5 Trends in calories 5.6 Trend in fasting BG 5.7 Meal images 5.8 Looking into meal nutrients estimation (evaluator vs user)", " Chapter 5 Results Below are some of the visualizations selected to highlight interesting insights about the data. Not all visualizations we tried were insightful or had any talking points and those are not included in themain results section. Some of those plots ended up in the appendix section. We heavily utilized facets to highlight patterns and differences between users. These faceted plots allow just a glimpse of individual user stats but mainly focus on the contrast and comparison between users. In order to facilitate comparison of same user across different plots we maintained consistent placement of users on the facet grid, so that the same user consistently appers in the same position on all faceted plots. Analyzing combinied data for multiple users did not yield any interesting insights, as the dataset contains few users and user bevaviours are different enough that in aggregate the interesting patterns get lost. 5.1 Looking at the time of the meals meals.selected %&gt;% mutate(eaten_at_hour = hour(eaten_at)) %&gt;% ggplot() + geom_histogram(aes(x=eaten_at_hour), bins = 24, fill = &quot;#4285FF&quot;) + facet_wrap(~user_fct, ncol = 6) + labs( title = &quot;Time of day when users had a meal&quot;, x = &quot;Hour of day&quot;, y = &quot;Number of meals&quot; ) + theme( #strip.text = element_text(size=25) ) Interesting to node the different pattern that can be seen. The are users (like 2004, 2262, 2392, 24, 2475, 2890, 56, 57, 58) who have a well defined 3 humps pattern. THose users tend to eat their 3 meals of the day at regular times. The users 2942, 2948, 2800 have a defined 2 hump pattern, eating only 2 meals a day. And then there are “grazers” like users 2254, 2536 who seem to be eating either all the time or with no consistent times. For those “two meals” user, what meal of the day are they skipping? Lets analyze the meal kinds per user. 5.2 Meal kind analysis meals.selected %&gt;% group_by(user_fct, kind) %&gt;% summarise(freq = n()) %&gt;% group_by(user_fct) %&gt;% mutate(prop = freq/sum(freq)) %&gt;% ungroup() %&gt;% ggplot() + geom_bar(aes(x = kind, y = prop, fill = kind), stat = &quot;identity&quot;) + facet_wrap(~user_fct, ncol = 6) + labs( x = &quot;Kind of meal&quot;, y = &quot;Proportion&quot;, title = &quot;Proportion of Meals&quot; ) + guides(fill = guide_legend(nrow = 1)) + theme( legend.title = element_blank(), legend.position=&quot;bottom&quot;, axis.title.x = element_blank(), axis.text.x = element_blank(), axis.ticks.x = element_blank() ) User 2254 (classified as “grazer”) does indeed eat a lot of snacks, which is consistent with the distribution of her times of meals. The “two meals” users like 2942 and 2800 are eating breakfast and lunch, but not dinner, and user 2948 is a bit of a mistery. The times of the meals are clearly centered around just two key times, but meal kind distribution contains breakfast, lunch and dinner. It’s good to see that breakfast is prominantly featured in almost all users. Another observation is that some users eat a lot of snacks, and some users do not. 5.3 Meal nutrients analysis meals.selected %&gt;% filter(!is.na(calories_eval)) %&gt;% select(user_fct, kind, Carbs = carbs_eval, Protein = protein_eval, Fat = fat_eval, Fiber = fiber_eval) %&gt;% gather(key = &quot;Nutrient&quot;, value, -user_fct, -kind) %&gt;% group_by(user_fct, Nutrient) %&gt;% summarise(total=sum(value)) %&gt;% group_by(user_fct) %&gt;% mutate(prop = total/sum(total)) %&gt;% ungroup() %&gt;% mutate(Nutrient = fct_relevel(Nutrient, &quot;Carbs&quot;, &quot;Protein&quot;, &quot;Fat&quot;, &quot;Fiber&quot;)) %&gt;% ggplot() + geom_bar(aes(x = Nutrient, y = prop, fill = Nutrient), stat = &quot;identity&quot;) + facet_wrap(~user_fct, ncol = 6) + labs( x = &quot;Nutrient&quot;, y = &quot;Proportion&quot;, title = &quot;Proportion of nutrients across all meals&quot; ) + guides(fill = guide_legend(nrow = 1)) + theme( legend.title = element_blank(), legend.position=&quot;bottom&quot;, axis.title.x = element_blank(), axis.text.x = element_blank(), axis.ticks.x = element_blank() ) Interesting to note that in almost all users the carbs is the biggest contributor to the diet, then protein, then fat and then fiber. Users that buck that trend are 57, 1884, 2948. 5.4 Meal BG impact visualization This is somewhat un-usual plot, where each line segment represents one meal a user had colored with the meal kind (breakfast, dinner, etc.). The line segment starts at the time (relative to the meal time) and BG of premeal measurement, and ends at the time/BG of the postmeal measurement. The steeper slope of the line indicates higher BG impact of a meal. The red horizontal line shows the diagnostic threshold level of 200mg/dL for postmeal BG to diagnose diabetes. meals.selected %&gt;% ggplot() + geom_segment(aes(x = -premeal_bg_delay_minutes, xend = postmeal_bg_delay_minutes, y=premeal_bg, yend=postmeal_bg, color = kind), show.legend = FALSE, alpha = 0.2) + # draw rect purely so that the legend appears as a solid rect, for a line with low alpha which makes it hard to see colors. # draw the rects outside of visible X limits set for the X axis. geom_rect(aes(xmin = -1000-premeal_bg_delay_minutes, xmax = -1000+postmeal_bg_delay_minutes, ymin=premeal_bg, ymax=postmeal_bg, fill = kind)) + geom_hline(aes(yintercept=200), color=&quot;red&quot;, show.legend = FALSE, alpha = 0.5) + scale_x_continuous(breaks=c(-30, 0, 60, 120, 180, 240), labels = c(&quot;&quot;, &quot;0&quot;, &quot;1h&quot;, &quot;2h&quot;, &quot;3h&quot;, &quot;4h&quot;), limits = c(-30, 240)) + facet_wrap(~user_fct, ncol = 6) + labs( x = &quot;Time since meal&quot;, y = &quot;BG&quot;, title = &quot;BG impact of meals per user&quot;, caption = &quot;Red horizontal line indicates warning postmeal BG levele of 200mg/dL&quot; ) + guides(color = guide_legend(nrow = 1), fill = guide_legend(nrow = 1)) + theme( legend.title = element_blank(), legend.position=&quot;bottom&quot;, ) Interestingly, most of users manage diabetes well, have a flat response to meals and barely exceeding the warning threshold of 200 mg/dL. Some users (namely 2254, 1809, 2262) have big ups and downs, and in case of user 1809 BG stays above the 200 level all the time. User 2312 seems to consistently start the day with very low BG in the 50-60 range, and breakfast moves BG in the 100-150 range. This behaviour and impact is very consistent. User 1821 recorded a lot of dinners (also visible on “Proportion of meals” plot), and the impact of dinners is managed well, with a bump of around 50 BG points per dinner. User 2942 seems to consistently have breakfasts with an impact of about 25-30 BG points and then lunch that seems to actually lower the BG in postmeal recording. That may indicate that the user takes insulin to manage diabetes. 5.5 Trends in calories meals.selected %&gt;% mutate(eaten_at_date = as.Date(eaten_at, tz = &quot;EST&quot;)) %&gt;% filter(eaten_at_date &lt;&quot;2019-04-01&quot; &amp; !is.na(calories_eval)) %&gt;% group_by(user_fct, eaten_at_date) %&gt;% summarise(sum_by_day = sum(eval_calories_computed)) %&gt;% ggplot(aes(x=eaten_at_date, y=sum_by_day))+ geom_point(size=0.1) + geom_smooth(method = &quot;lm&quot;, na.rm=TRUE, size=0.5) + facet_wrap(~user_fct, ncol=6) + labs ( title = &quot;Trend of daily calories consumed by user&quot;, x = &quot;Time&quot;, y = &quot;Calories&quot; ) + theme( axis.text.x = element_text(angle = 90) ) At a glance it looks like most of the users either maintained or decreased the number of calories they consume per day. Notable exception is user 2890, whose calories consumption increased. What is concerning about this plot is that for most users the daily calories consumption is well below 2000 calories/day. One explanation is that users didn’t record all meals in a day. Plotting daily amount of carbs consumed (carbs is the most important nutrient to manage for diabetics) by users show the same trends as the calories and is skipped (See appendix) 5.6 Trend in fasting BG meals.selected %&gt;% mutate(eaten_at_date = as.Date(eaten_at, tz = &quot;EST&quot;)) %&gt;% filter(eaten_at_date &lt;&quot;2019-04-01&quot; &amp; !is.na(premeal_bg)) %&gt;% filter(kind == &#39;breakfast&#39;) %&gt;% group_by(user_fct, eaten_at_date) %&gt;% summarise(fasting_bg = first(premeal_bg)) %&gt;% ggplot(aes(x=eaten_at_date, y=fasting_bg))+ geom_point(size=0.1) + geom_smooth(method = &quot;lm&quot;, na.rm=TRUE, size=0.5) + geom_hline(aes(yintercept=125), color=&quot;red&quot;, show.legend = FALSE, alpha = 0.5) + facet_wrap(~user_fct, ncol=6) + labs ( title = &quot;Trend of fasting BG by user&quot;, x = &quot;Time&quot;, y = &quot;Fasting BG&quot; ) + theme( axis.text.x = element_text(angle = 90) ) The fasting BG is defined as the first BG measurement after 8h of fasting, normally after sleep in the morning before breakfast. This plot shows the trend of fasting BG by user with a trend line (in blue) and a threshold (in red). The official guidelines to the fasting BG are: below 100 is considered normal (not shown on the plot), 100-125 is pre-diabetes, above 125 leads to a disgosis with diabetes. For most of the users the trend line looks flat and at or below the threshold level. User 1809 shows a large drop in fasting BG, which would be promising, but unfortunately only few (5) datapoint exist for that user. 5.7 Meal images Here we explore the images of meals for user 2254. The first set of images show meals that has the biggest impact over shortest timeframe (bg_impact_slope), and the second set show the meals that had smallest (even negative) imapct on BG. display_meals &lt;- function(df, ncol = 6, nrow = 3, rotate = 0) { meals = df[1:(ncol*nrow), ] %&gt;% select(user_id, meal_id) filenames = paste0(normalizePath(&quot;~/Dropbox/MealyzerData&quot;), &quot;/&quot;, meals[[&quot;user_id&quot;]], &quot;/images/medium/&quot;, meals[[&quot;meal_id&quot;]], &quot;.jpg&quot;) data_uris = sapply(filenames, knitr::image_uri) images = tibble(src = data_uris) r2d3(data=images, script = &quot;display_meals.js&quot;, container = &quot;div&quot;, options=list(ncol=ncol, nrow=nrow, rotate=rotate)) } meals.selected %&gt;% filter(user_id == &quot;2254&quot;) %&gt;% arrange(desc(bg_impact_slope)) %&gt;% display_meals(ncol = 6, nrow = 3, rotate = -90) meals.selected %&gt;% filter(user_id == &quot;2254&quot;) %&gt;% arrange(bg_impact_slope) %&gt;% display_meals(ncol = 6, nrow = 3, rotate = -90) Unsurprisinly the lowest BG impact images are all pictures of water/drinks. 5.7.1 Per user correlation between variables meals.selected %&gt;% filter(user_id == &quot;2254&quot;) %&gt;% filter(fiber_eval &lt; 20) %&gt;% # filter outliers filter(bg_impact_slope &lt; 5 &amp; bg_impact_slope &gt; -3) %&gt;% mutate( protein_fat=eval_proportion_protein-eval_proportion_fat, protein_carb=eval_proportion_protein-eval_proportion_carbs, carb_fat=eval_proportion_carbs-eval_proportion_fat) %&gt;% select(calories_eval, eval_calories_computed, carbs_eval, fat_eval, protein_eval, fiber_eval, eval_proportion_carbs, eval_proportion_fat, eval_proportion_protein, bg_impact, bg_impact_slope, premeal_bg, postmeal_bg) %&gt;% lattice::splom() There is a very strong correlation between calories_eval (calories assigned by the evaluator) and eval_calories_computed (calories calculated from the nutritional breakdown of a meal into carbs/fat/protein amounts). That shows that evaluator’s experience is spot on estimating the meal or the evaluators are using the same formula themselves. There is a positive correlation between calories_eval/eval_calories_computed and each of carbs_eval, ‘fat_eval’ and ‘protein_eval’. Again, no surprise as the calories can be derived from the nutrients. A strong negative correlation between eval_proportion_carbs and eval_proportion_fat shows that when people vary meals they tend to vary between high carbs low fat and low carbs high fat meals. The proportion of protein stays independent somewhat independent. The correlation between bg_impact and bg_impact_slope also makes sense as the time delay between premeal and postmeal BG is relatively constant at about 2h. Unfortunately there are no clear correlations to understand what actually affects the glycenic impact. The relationship is non-liniear and more sphisticated methods should be employed to analyse this question. 5.8 Looking into meal nutrients estimation (evaluator vs user) Here we look into a question: how well to users estimate their own meals by comparing user’s estimates to the professional nutritionist evaluator estimates. Here we are chose to display three plots with increasing level of details. (function(meals) { estimate_diffs = meals %&gt;% mutate( Calories = calories_user - calories_eval, Carbs = carbs_user - carbs_eval, Protein = protein_user - protein_eval, Fat = fat_user - fat_eval, Fiber = fiber_user - fiber_eval, ) %&gt;% filter(!is.na(Calories) &amp; !is.na(Carbs) &amp; !is.na(Protein) &amp; !is.na(Fat) &amp; !is.na(Fiber)) g1 = estimate_diffs %&gt;% ggplot() + geom_boxplot(aes(y = Calories)) + geom_hline(aes(yintercept=0), color=&quot;black&quot;, alpha = 0.5) + scale_y_continuous(limits = c(-2000, 2000)) + coord_flip() + labs( title = &quot;Calories estimation error overall&quot;, y = &quot;Error (calories)&quot; ) + theme( axis.title.y = element_blank(), axis.text.y = element_blank(), axis.ticks.y = element_blank() ) # + #cowplot::theme_cowplot(font_size = 10) g2 = estimate_diffs %&gt;% gather(key = &quot;Nutrient&quot;, value = &quot;Error&quot;, Carbs, Protein, Fat, Fiber) %&gt;% ggplot() + geom_boxplot(aes(x = reorder(Nutrient, Error, median), y = Error)) + geom_hline(aes(yintercept=0), color=&quot;black&quot;, alpha = 0.5) + scale_y_continuous(limits = c(-100, 100)) + coord_flip() + labs( title = &quot;Nutrients estimation error overall&quot;, x = &quot;Nutrient&quot;, y = &quot;Error (grams)&quot; )# + #cowplot::theme_cowplot(font_size = 10) g3 = estimate_diffs %&gt;% filter(!(user_id %in% c(&quot;99&quot;, &quot;124&quot;, &quot;377&quot;, &quot;445&quot;, &quot;1663&quot;))) %&gt;% ggplot() + geom_boxplot(aes(x = fct_rev(user_fct), y = Carbs), varwidth = TRUE) + geom_hline(aes(yintercept=0), color=&quot;black&quot;, alpha = 0.5) + scale_y_continuous(limits = c(-100, 100)) + coord_flip() + labs( title = &quot;Carbs estimation error by user&quot;, x = &quot;Users&quot;, y = &quot;Error (grams)&quot; )# + #cowplot::theme_cowplot(font_size = 10) cowplot::plot_grid(g1, g2, g3, align = &quot;hv&quot;, nrow = 3, axis = &quot;lr&quot;, rel_heights = c(0.8, 2, 5)) })(meals.imputed) The first plot displays the distribution of errors by all users when estimating meal calories. By error we mean the difference between evaluator’s extimate on the amount of calories and the user’s estimate on the same. The distribution of error looks to be a compact simmetric distribution with a median very close to 0. In the task of calories estimation the users did much better then expected. This was a surprising finding to the researcher, where the assumption before seeing the data was that the users are much worse then the nutritionists in the ability to estimate the calories. Another consequence is that there is an opportunity to avoid an expensive process to get the catured meals evaluated by a professional nutritionist and to crowd-source the evaluations. The second plot displays how well users estimated each nutrient overall. For Fiber which is generally good for diabetics, there is slight overcounting (wishful thinking?). For Fat and Protein the median of the estimates are pretty close to 0. And the Carbs overall are slightly under-estimated. In estimation of carbs the users performed the worst, which is concerning because tracking/estimating the amount of carbs is one of necessary tasks in managing diabetes. The third plot breaks down the user’s ability to estimate carbs by each user. Here we see that there are systematic biases how different users estimate carbs. Some users (e.g. the first five users) estimate very close to the evaluator’s value, and some users are consistently under-estimating. Interestingly there are no users who systematically over-estimated the amount of carbs. "],
["conclusion.html", "Chapter 6 Conclusion", " Chapter 6 Conclusion "],
["appendix.html", "Chapter 7 Appendix 7.1 Sleep", " Chapter 7 Appendix meals.selected %&gt;% mutate(eaten_at_date = as.Date(eaten_at, tz = &quot;EST&quot;)) %&gt;% filter(eaten_at_date &lt;&quot;2019-04-01&quot; &amp; !is.na(carbs_eval)) %&gt;% group_by(user_fct, eaten_at_date) %&gt;% summarise(sum_by_day = sum(carbs_eval)) %&gt;% ggplot(aes(x=eaten_at_date, y=sum_by_day))+ geom_point(size=0.1)+ geom_smooth(method = &quot;lm&quot;)+ facet_wrap(~user_fct, ncol=6) + labs ( title = &quot;Total carbs consumed trends by user&quot;, x = &quot;Time&quot;, y = &quot;Carbs&quot; ) + theme( axis.text.x = element_text(angle = 90) ) meals.selected %&gt;% mutate(eaten_at_date = as.Date(eaten_at, tz = &quot;EST&quot;)) %&gt;% filter(eaten_at_date &lt;&quot;2019-04-01&quot; &amp; !is.na(calories_eval)) %&gt;% group_by(user_fct, eaten_at_date) %&gt;% summarise( sum_carbs = sum(carbs_eval), sum_protein = sum(protein_eval), sum_fat = sum(fat_eval), sum_fiber = sum(fiber_eval), total = sum_carbs+sum_protein+sum_fat+sum_fiber, Carbs=sum_carbs/total, Protein=sum_protein/total, Fat=sum_fat/total, Fiber=sum_fiber/total ) %&gt;% gather(key = &quot;Nutrient&quot;, value = &quot;Proportion&quot;, Carbs, Protein, Fat, Fiber) %&gt;% #print_df() %&gt;% ggplot()+ geom_point(aes(x=eaten_at_date, y=Proportion, color = Nutrient), size=0.1) + geom_smooth(aes(x=eaten_at_date, y=Proportion, color = Nutrient), method = &quot;lm&quot;) + facet_wrap(~user_fct, ncol=6) + labs ( title = &quot;Nutrient proportions trends by user&quot;, x = &quot;Time&quot;, y = &quot;Proportion&quot; ) + guides(color = guide_legend(nrow = 1), fill = guide_legend(nrow = 1)) + theme( axis.text.x = element_text(angle = 90), legend.title = element_blank(), legend.position=&quot;bottom&quot;, ) bg_readings.all %&gt;% filter(user_fct %in% selected_user_ids) %&gt;% mutate(hour = format(as.POSIXct(time, format=&quot;%H:%M:%S&quot;),&quot;%H&quot;)) %&gt;% group_by(user_fct, hour) %&gt;% summarise(avg_bg = mean(bg)) %&gt;% ggplot(aes(x=hour, y=avg_bg))+ geom_point(size=0.3)+ scale_x_discrete(breaks=c(0, 6, 12, 18, 24)) + facet_wrap(~user_fct, ncol=6) + labs( title = &quot;Average BG Level by Hour&quot;, x=&quot;Hour&quot;, y=&quot;Average BG Level&quot; ) + theme( axis.text.x = element_text(angle = 90), ) Have the ability of users to estimate nutrients change overtime with the use of the app? meals.imputed %&gt;% filter(!is.na(calories_eval) &amp; !is.na(calories_user)) %&gt;% mutate( calories_diff = calories_user - calories_eval, carbs_diff = carbs_user - carbs_eval, protein_diff = protein_user - protein_eval, fat_diff = fat_user - fat_eval, fiber_diff = fiber_user - fiber_eval ) %&gt;% mutate(eaten_at_date = as.Date(eaten_at, tz = &quot;EST&quot;)) %&gt;% filter(eaten_at_date &lt;&quot;2019-04-01&quot;) %&gt;% group_by(user_fct, eaten_at_date) %&gt;% summarise(carbs_diff = mean(carbs_diff)) %&gt;% ggplot(aes(x=eaten_at_date, y=carbs_diff))+ geom_point(size=0.1) + geom_smooth(method = &quot;lm&quot;, na.rm=TRUE, size=0.5) + facet_wrap(~user_fct, ncol=6, scales = &quot;free_y&quot;) + labs ( title = &quot;Trend of carbs estimation error&quot;, x = &quot;Time&quot;, y = &quot;Carbs user estimation error&quot; ) + theme( axis.text.x = element_text(angle = 90) ) meals.imputed %&gt;% filter(!is.na(calories_eval) &amp; !is.na(calories_user)) %&gt;% mutate( calories_diff = calories_user - calories_eval, carbs_diff = carbs_user - carbs_eval, protein_diff = protein_user - protein_eval, fat_diff = fat_user - fat_eval, fiber_diff = fiber_user - fiber_eval ) %&gt;% gather(key = &quot;type&quot;, value = &quot;diff&quot;, carbs_diff, protein_diff, fat_diff) %&gt;% ggplot() + geom_boxplot(aes(x = type, y = diff)) + coord_flip() + facet_wrap(~user_fct, ncol = 6) 7.1 Sleep sleep = read_csv(file.path(raw_data_path, &quot;1983&quot;, &quot;sleep.csv&quot;), col_types = cols()) %&gt;% mutate(time = as.timestamp(time)) Questions: * does the amount of sleep impact the first BG reading in the day (pre-breakfast, important!) (the very first pre-breakfst BG reading is considered fasting and is a true-ish representation of glycemic control (how bad is your diabetis)). * Does amount (or quality of sleep) have an impoact on pre-breakfast BG (&lt;- new measure). * Urban mith - the quality/amount of sleep may change how people respond to meals, e.g. for the same nutritional breakdown of a meal BG_impoact will be different. Fat and protein mediate the impact of carbohidrate. How to show this (focus on the visualization, data may be lacking the signal) "]
]
