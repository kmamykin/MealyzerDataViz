# Experiments visualizing data 



* Qualify dataset (missing data)
* Interesting questions
* Interactive viz (Something like Tableau)
  select variables, selecting filters, selecting smoothers


### Dataset highlevel view


```{r}
premeal_delay_buckets = c("< 15 min", "10 - 60 min", "> 60 min")
meals_data %>%
  #filter(user_id == 2392) %>%
  #filter(premeal_bg_delay_minutes <= 300 & premeal_bg_delay_minutes >= 0) %>%
  #mutate(premeal_bg_delay = ifelse(premeal_bg_delay_minutes < 15, premeal_delay_buckets[1], ifelse(premeal_bg_delay_minutes < 60, premeal_delay_buckets[2], premeal_delay_buckets[3]))) %>%
  #mutate(premeal_bg_delay = fct_relevel(premeal_bg_delay, premeal_delay_buckets)) %>%
  #print_df(user_id, premeal_bg_time, eaten_at, premeal_bg_delay_minutes) %>%
  ggplot() +
  #geom_bar(aes(x=premeal_bg_delay, fill=premeal_bg_delay)) +
  geom_histogram(aes(x=premeal_bg_delay_minutes), binwidth = 30) +
  scale_x_continuous(breaks=c(0, 60, 120, 180, 240, 300), labels = c("0", "1h", "2h", "3h", "4h", "5h"), limits = c(0, 300)) + 
  facet_wrap(~user_id, ncol = 7, scales = "free_y") + 
  labs(
    title = "Delay of premeal BG recordings, bucketed"
  ) + 
  theme(
    legend.position="top",
    #axis.title.x = element_blank(),
    #axis.text.x = element_blank(),
    #axis.ticks.x = element_blank()
    axis.title.y = element_blank(),
    axis.text.y = element_blank(),
    axis.ticks.y = element_blank(),
    strip.text = element_text(size=25),
  )
```

```{r}
postmeal_delay_buckets = c("< 1 hour", "1 - 2 hours", "> 2 hours")
meals_data %>%
  #mutate(postmeal_bg_delay = ifelse(postmeal_bg_delay_minutes < 60, postmeal_delay_buckets[1], ifelse(postmeal_bg_delay_minutes < 120, postmeal_delay_buckets[2], postmeal_delay_buckets[3]))) %>%
  #mutate(postmeal_bg_delay = fct_relevel(postmeal_bg_delay, postmeal_delay_buckets)) %>%
  #print_df(user_id, eaten_at, postmeal_bg_time, postmeal_bg_delay_minutes) %>%
  ggplot() +
  #geom_bar(aes(x=postmeal_bg_delay, fill=postmeal_bg_delay)) +
  geom_histogram(aes(x=postmeal_bg_delay_minutes), binwidth = 30) +
  #geom_density(aes(x = postmeal_bg_delay_minutes)) +
  facet_wrap(~user_id, ncol = 7) + 
  scale_x_continuous(breaks=c(0, 60, 120, 180, 240, 300), labels = c("0", "1h", "2h", "3h", "4h", "5h"), limits = c(0, 300)) + 
  labs(
    title = "Delay of postmeal BG recordings, bucketed"
  ) + 
  theme(
    legend.position="top",
    axis.title.x = element_blank(),
    #axis.text.x = element_blank(),
    #axis.ticks.x = element_blank()
    #axis.title.y = element_blank(),
    #axis.text.y = element_blank(),
    #axis.ticks.y = element_blank()
    strip.text = element_text(size=25),
  )
```


### Plotting activeness vs. bg level

```{r}
bg_readings %>%
  group_by(meal_id) %>%
  mutate(change_in_bg = c(0,diff(bg)/first(bg))) %>%
  select(user_id, change_in_bg) %>%
  filter(change_in_bg != 0) %>%
  group_by(user_id) %>%
  summarise(n = n(), avg_change_in_bg = mean(change_in_bg))  %>%
  mutate(activeness = ifelse(n > median(n), "high","low"))  %>%
  ggplot(aes(x=seq_along(avg_change_in_bg), y=avg_change_in_bg)) +
  geom_point(aes(colour=activeness)) 
```


### Plotting pre/post meal bg ,faceting on user_id

```{r}
bg_readings %>%
  group_by(meal_id) %>%
  mutate(premeal = first(bg), postmeal =last(bg)) %>%
  select(user_id, meals_kind, premeal, postmeal) %>%
  distinct() %>%
  ggplot(aes(x=premeal, y=postmeal)) +
  geom_point(size = 0.2, aes(colour=meals_kind)) +
  facet_wrap(~user_id, ncol = 7)
```



```{r}
parcoords(
  meals_data %>% 
    select(kind,carbs_eval, protein_eval,fat_eval,fiber_eval,calories_eval, bg_impact)
  , rownames = F # turn off rownames from the data.frame
  , brushMode = "1D-axes"
  , reorderable = T
  , queue = T,
  alpha = 0.05,
  color = list(
      colorBy = "kind"
      , colorScale = "scaleOrdinal"
      , colorScheme = "schemeCategory10"
    )
  , withD3 = TRUE
)
```
TODO: look are nutritional profile of each person - distribution of nutrients per meal, e.g. for person X, an aerage breakfast has this distribution of carbs/fat/protein/fiber, and dinner looks like this....

```{r}
parcoords(
  meals_data %>% 
    select(user_id, kind, bg_impact, calories_eval, carbs_eval, protein_eval,fat_eval,fiber_eval) %>%
    gather(key = "variable", value, -user_id,-kind) %>%
    group_by(user_id, kind, variable) %>%
    summarise(avg_eval=mean(value, na.rm = T)) %>%
    spread(variable, avg_eval)
  , rownames = F # turn off rownames from the data.frame
  , brushMode = "1D-axes"
  , reorderable = T
  , queue = T,
  alpha = 0.3,
  color = list(
      colorBy = "kind"
      , colorScale = "scaleOrdinal"
      , colorScheme = "schemeCategory10"
    )
  , withD3 = TRUE
)
```

TODO: THe ultimate question: for a person, what is the cause of the glicemic impact? Can we show how to attribute the change of bg_impact to a sibgle nutrient or a combination.

```{r}
meals_data %>%
  select(user_id, kind,carbs_eval, protein_eval,fat_eval,fiber_eval,calories_eval, bg_impact) %>%
  mutate_if(is.numeric, scale) %>%
  mutate(ID = 1:3303) %>%
  gather(key = "variable", value, -user_id,-kind, -ID) %>% 
  ggplot(aes(x=variable,y=value,colour=kind, group=ID))+
  geom_line(alpha=0.5)+facet_wrap(~user_id,ncol=7)+
  theme(
    legend.position="top",
    axis.text=element_text(size=5, angle = 90)
  )
```

```{r}
meals_data %>%
  select(user_id, kind,carbs_eval, protein_eval,fat_eval,fiber_eval, bg_impact) %>%
  #mutate(ID = 1:3303) %>%
  gather(key = "variable", value, -user_id,-kind) %>%
  group_by(user_id, kind, variable) %>%
  summarise(avg_eval=mean(value, na.rm = T)) %>%
  ungroup() %>%
  mutate_if(is.numeric, scale) %>%
  #gather(key = "variable", value, -user_id,-kind, -ID, -avg_eval) %>% 
  ggplot(aes(x=variable,y=avg_eval,group=1))+
  geom_line(alpha=0.5)+
  coord_flip() +
  facet_wrap(~user_id,ncol=7)
```


```{r}
sleep %>%
  ggplot() +
  geom_point(aes(x=time, y= seconds,color=factor(level)), size=0.5)
```
```{r}
sleep %>%
 filter(level %in% c("deep","light","rem","wake")) %>%
  ggplot(aes(x = seconds)) +
  geom_histogram(alpha=.7, color="black", fill="steelblue2", bins = 32) +
  facet_wrap( ~level) +
  xlab("Time Frame in Seconds") + ylab("Count") + 
  ggtitle("Histogram of Time Frames By Sleep Stage") +
  theme(plot.title = element_text(face = "bold"))
```

```{r}
library("ggridges")
sleep %>%
  filter(level %in% c("deep","light","rem","wake")) %>%
  ggplot(aes(x = seconds, y = level, fill = level)) +
  geom_density_ridges_gradient(scale = 2) + theme_ridges()+
  scale_y_discrete(expand = c(0.3, 0)) +
  scale_x_continuous(expand = c(0.01, 0))+
  labs(x="Time Frames", y="Sleep Stage")+
  ggtitle("Density Curves of Time Frames by Sleep Stage")+
  theme(plot.title = element_text(hjust = 0.6)) +
  guides(fill = guide_legend(reverse=T))

```


```{r}
distance = read.csv("~/Dropbox/MealyzerData/1983/activities-distance_overview.csv", header=T)
calories = read.csv("~/Dropbox/MealyzerData/1983/activities-calories_overview.csv", header=T)
steps = read.csv("~/Dropbox/MealyzerData/1983/activities-steps_overview.csv", header=T)

activities <- merge(steps, merge(distance, calories, by = "date", all = TRUE), by = "date", all = TRUE)
colnames(activities) <- c("date","steps","distance","calories")

# date vs. calories,distance,steps for user #1983
activities %>% 
  mutate(date = date(as.timestamp(date))) %>%
  slice(1:133) %>% # weird data after this point
  gather(key = key, value = value, -date) %>%
  ggplot(aes(date, value, col=key)) + geom_line()

# scale the above data
activities %>% 
  mutate(date = date(as.timestamp(date))) %>%
  slice(1:133) %>% # weird data after this point
  gather(key = key, value = value, -date) %>%
  group_by(key) %>%
  mutate(index = round(100*value/value[1], 2)) %>% 
  ungroup() %>%
  ggplot(aes(date, index, col=key)) + geom_line()

# once scaled, we see that the data for distance and steps completely overlaps, suggesting that one is a linear function of another.  
```

```{r}
user1983 = bg_readings %>%
  mutate(date=date(time)) %>%
  group_by(user_id, date) %>%
  mutate(avg_bg=mean(bg)) %>%
  select(user_id,date,avg_bg) %>%
  unique() %>%
  filter(user_id==1983) %>%
  slice(1:72) # weird data after this point

user1983 %>%
  ggplot(aes(date, avg_bg)) + geom_line()

# plot avg_bg vs. calories for user #1983
activities %>% 
  mutate(date = date(as.timestamp(date))) %>%
  full_join(user1983, by="date") %>%  #or use merge?
  select(-user_id, -distance, -steps) %>%
  filter(date < "2019-04-01") %>%
  gather(key = key, value = value, -date) %>%
  group_by(key) %>%
  mutate(index = round(100*value/value[1], 2)) %>% 
  ungroup() %>%
  ggplot(aes(date, index, col=key)) + geom_line()

# We see that there are missing values for average BG, which is normal since bg level and calories burnt are measured by two different devices/apps.
# Based on the data we have here, we see that avg_bg has a nagative relationship with calories burnt, where higher avg_bg usually is associated with lower calories burnt that day.
```



```{r}
#user 1983's avg_bg vs. minutesasleep by day

sleep_overview = read.csv("~/Dropbox/MealyzerData/1983/sleep_overview.csv")
sleep_overview %>%
  mutate(date=date(as.timestamp(dateOfSleep))) %>%
  arrange(date) %>% # to perform correct scaling, must have date in ascending order
  group_by(date) %>%
  mutate(minutesAsleep = sum(minutesAsleep)) %>%
  full_join(user1983, by="date") %>% #merge?
  select(date, minutesAsleep, avg_bg) %>%
  filter(date < "2019-04-01") %>%
  gather(key = key, value = value, -date) %>%
  group_by(key) %>%
  mutate(index = round(100*value/value[1], 2)) %>% 
  ungroup() %>%
  ggplot(aes(date, index, col=key)) + geom_line()

```

```{r}
# user 1983's parcoords 
parcoords(
  sleep_overview %>% 
    select(-minutesToFallAsleep) %>%
    mutate(date=date(as.timestamp(dateOfSleep))) %>%
    group_by(date) %>%
    mutate(minutesAsleep = sum(minutesAsleep)) %>%
    merge(user1983, by="date") %>%
    ungroup() %>%
    select(-minutesAfterWakeup, -date, - user_id) 
  , rownames = F # turn off rownames from the data.frame
  , brushMode = "1D-axes"
  , reorderable = T
  , queue = T,
  alpha = 0.5,
  color = list(
      colorBy = "kind"
      , colorScale = "scaleOrdinal"
      , colorScheme = "schemeCategory10"
    )
  , withD3 = TRUE
)
# arrange in this order:
# dateOfSleep, endTime, startTime, minutesAwake, minutesAsleep, efficiency, ang_bg, duration, timeInBed
# Looks like dateOfSleep, endTime, startTime are the same, so is duration, timeInBed
# avg_bg is correlated with the duration - which may be a good talking point
```


